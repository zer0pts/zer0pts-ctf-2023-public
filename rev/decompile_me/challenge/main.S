.intel_syntax noprefix
.file "main.c"
.text
.globl main
.type main, @function

// rdi --> rbp
// rsi --> rbx
write:
  mov rdx, rbx
  mov rsi, rbp
  mov edi, 1
  mov eax, 1
  syscall
  ret

// rdi --> r15
// rsi --> stack1
read:
  mov rdx, [rsp+8]
  mov rsi, r15
  xor edi, edi
  xor eax, eax
  syscall
  ret

// rdi --> none
// rsi --> r14
// rdx --> rdx
memcmp:
  xor eax, eax
  xor ecx, ecx
  lea rsi, [rip+dat]
lx:
  mov bl, [r14+rcx]
  xor bl, [rsi+rcx]
  or al, bl
  inc ecx
  cmp ecx, edx
  jb lx
  ret

// rdi --> r12 (key)
// rsi --> r13 (sbox)
RC4_setkey:
  xor ecx, ecx
  xor edx, edx
  .loop_init_sbox:
  mov [r13+rcx], cl
  inc ecx
  cmp ecx, 0x100
  jb .loop_init_sbox
  xor ecx, ecx
  xor ebx, ebx
  .loop_key_schedule:
  // j = (j + S[i] + key[i % len]) % N
  movzx eax, byte ptr [r13+rcx]
  add edx, eax
  movzx eax, byte ptr [r12+rbx]
  add edx, eax
  movzx edx, dl
  // swap(&S[i], &S[j])
  mov dil, [r13+rdx]
  mov sil, [r13+rcx]
  mov [r13+rdx], sil
  mov [r13+rcx], dil
  inc ebx
  cmp ebx, 8
  jb .skip_mod_keylen
  xor ebx, ebx
  .skip_mod_keylen:
  inc ecx
  cmp ecx, 0x100
  jb .loop_key_schedule
  ret

// rdi --> r15 (plain)
// rsi --> r14 (cipher)
// rdx --> r13 (sbox)
RC4_encrypt:
  xor ecx, ecx
  xor edx, edx // i
  xor ebx, ebx // j
  .loop_encrypt:
  inc edx
  movzx edx, dl
  movzx eax, byte ptr [r13+rdx]
  add ebx, eax
  movzx ebx, bl
  mov dil, [r13+rdx]
  mov sil, [r13+rbx]
  mov [r13+rdx], sil
  mov [r13+rbx], dil
  movzx eax, byte ptr [r13+rdx]
  movzx edi, byte ptr [r13+rbx]
  add eax, edi
  movzx eax, al
  movzx eax, byte ptr [r13+rax]
  xor al, byte ptr [r15+rcx]
  mov byte ptr [r14+rcx], al
  inc ecx
  cmp ecx, 0x80
  jb .loop_encrypt
  ret

main:
  push rbp
  sub rsp, 0x200
  mov ecx, 0x200
  xor eax, eax
  mov rdi, rsp
  repne stosb

  mov ebx, 6
  lea rbp, [rip+flag]
  lea r12, [rip+val]
  mov r15, rsp
  lea r14, [r15+0x80]
  lea r13, [r15+0x100]
  mov qword ptr [r15], 0x80

  mov edx, 14
  lea rsi, [rip+flag]
  mov edi, 1
  call write

  mov edx, 0x80
  mov rsi, rsp
  xor edi, edi
  call read

  lea rsi, [rip+sbox]
  lea rdi, [rip+key]
  call RC4_setkey

  lea rdx, [rip+sbox]
  lea rsi, [rsp+0x80]
  mov rdi, rsp
  call RC4_encrypt

  mov edx, 0x80
  lea rsi, [rip+enc]
  lea rdi, [rsp+0x80]
  call memcmp
  test rax, rax
  jnz .wrong_flag

  lea rdi, [rip+correct]
  call puts
  jmp .return
.wrong_flag:
  lea rdi, [rip+wrong]
  call puts
.return:
  add rsp, 0x200
  pop rbp
  ret

.section .bss
.lcomm sbox, 0x100

.section .rodata
flag: .ascii "FLAG: \0"
correct: .ascii "Correct!\0"
wrong: .ascii "Wrong...\0"
key : .quad 0xdeadbeefcafebabe
enc : .byte 0x8, 0x9, 0xdc, 0xcf, 0x97, 0x88, 0x8c, 0xd0, 0xa1, 0x33, 0xe5, 0x91, 0xd9, 0xce, 0xc6, 0xbc, 0x3b, 0xac, 0xbd, 0x59, 0xb7, 0xca, 0xb0, 0x2d, 0xdf, 0x34, 0xd6, 0x3f, 0x5b, 0x93, 0xcd, 0xdc, 0x8d, 0xeb, 0x11, 0x45, 0x55, 0x73, 0x5d, 0xa, 0x8a, 0x2d, 0x60, 0x8c, 0x3e, 0xd0, 0x51, 0x1d, 0xd7, 0x74, 0x49, 0x9a, 0x45, 0x9a, 0x2a, 0x69, 0x74, 0x8c, 0x0, 0x72, 0xed, 0x88, 0x1a, 0xff, 0xff, 0xb7, 0xd, 0xef, 0x73, 0x1f, 0x90, 0x7d, 0xc5, 0xbe, 0x4f, 0xa5, 0xb2, 0x29, 0x6a, 0x5e, 0x7, 0x97, 0xc1, 0xa4, 0xfc, 0xc0, 0x68, 0x27, 0x2, 0xeb, 0xb, 0x61, 0xc0, 0xc3, 0xbd, 0xa3, 0xb9, 0xc0, 0xa9, 0x6c, 0xf8, 0x4b, 0xd7, 0x7f, 0x7d, 0x63, 0x7d, 0xf7, 0xe0, 0x57, 0x0, 0x81, 0x89, 0x8b, 0xa2, 0x7b, 0xee, 0xaa, 0x53, 0xfb, 0xd9, 0x2d, 0x2e, 0xf1, 0x6d, 0x8c, 0x24, 0xe0

.section .got
val : .quad 0x1145141919810931
dat : .byte 0x78, 0xcf, 0xc4, 0x85, 0xdc, 0x33, 0x7, 0x4c, 0x93, 0x35, 0xfb, 0x7c, 0x10, 0x8e, 0xbe, 0x93, 0x28, 0xe6, 0x2e, 0x75, 0xda, 0x5e, 0x85, 0xc5, 0x91, 0x15, 0x75, 0x89, 0x48, 0xe, 0x29, 0xa4, 0xf9, 0xa6, 0x3a, 0x6e, 0x1f, 0x84, 0xf7, 0x42, 0xb0, 0x93, 0x31, 0xf0, 0x68, 0xc0, 0x43, 0x38, 0x7, 0x32, 0x9, 0x57, 0xda, 0x32, 0x44, 0xcf, 0xcd, 0x8f, 0xe5, 0xbf, 0xe3, 0xd6, 0xbb, 0x59, 0x9a, 0x6a, 0x84, 0x85, 0xd3, 0x22, 0xa9, 0x8e, 0xb5, 0xea, 0xbd, 0x57, 0xde, 0xb1, 0x6c, 0x93, 0xe4, 0x74, 0x70, 0xac, 0x1a, 0x3, 0xd9, 0x16, 0x9f, 0xbc, 0x97, 0xfb, 0x85, 0xd9, 0xa6, 0x9e, 0xd4, 0xd6, 0x2, 0x59, 0xd5, 0x28, 0xb3, 0x93, 0x16, 0xb6, 0xc4, 0x78, 0xc4, 0xa2, 0x12, 0xd2, 0xef, 0xb1, 0x54, 0x18, 0xfd, 0x76, 0x51, 0xa3, 0x5e, 0x57, 0xb8, 0x58, 0x4b, 0x1e, 0xe2, 0x41

